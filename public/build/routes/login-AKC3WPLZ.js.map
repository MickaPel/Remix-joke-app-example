{
  "version": 3,
  "sources": ["../../../app/routes/login.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\login.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\login.tsx\");\n}\n// REMIX HMR END\n\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport stylesUrl from \"~/styles/login.css\";\nimport { db } from \"~/utils/db.server\";\nimport { badRequest } from \"~/utils/request.server\";\nimport { createUserSession, login, register } from \"~/utils/session.server\";\nexport const links = () => [{\n  rel: \"stylesheet\",\n  href: stylesUrl\n}];\nexport const meta = () => {\n  return [{\n    title: \"Remix Jokes | Login\"\n  }, {\n    name: \"description\",\n    content: \"Login form\"\n  }];\n};\nfunction validateUsername(username) {\n  if (username.length < 3) {\n    return \"Usernames must be at least 3 characters long\";\n  }\n}\nfunction validatePassword(password) {\n  if (password.length < 6) {\n    return \"Passwords must be at least 6 characters long\";\n  }\n}\nfunction validateUrl(url) {\n  const urls = [\"/jokes\", \"/\", \"https://remix.run\"];\n  if (urls.includes(url)) {\n    return url;\n  }\n  return \"/jokes\";\n}\nexport const action = async ({\n  request\n}) => {\n  const form = await request.formData();\n  const loginType = form.get(\"loginType\");\n  const password = form.get(\"password\");\n  const username = form.get(\"username\");\n  const redirectTo = validateUrl(form.get(\"redirectTo\") || \"/jokes\");\n  if (typeof loginType !== \"string\" || typeof password !== \"string\" || typeof username !== \"string\") {\n    return badRequest({\n      fieldErrors: null,\n      fields: null,\n      formError: \"Form not submitted correctly.\"\n    });\n  }\n  const fields = {\n    loginType,\n    password,\n    username\n  };\n  const fieldErrors = {\n    password: validatePassword(password),\n    username: validateUsername(username)\n  };\n  if (Object.values(fieldErrors).some(Boolean)) {\n    return badRequest({\n      fieldErrors,\n      fields,\n      formError: null\n    });\n  }\n  switch (loginType) {\n    case \"login\":\n      {\n        // login to get the user\n        const user = await login({\n          username,\n          password\n        });\n        console.log({\n          user\n        });\n        // if there's no user, return the fields and a formError\n        if (!user) {\n          return badRequest({\n            fieldErrors: null,\n            fields,\n            formError: \"Username/Password combination is incorrect\"\n          });\n        }\n        // if there is a user, create their session and redirect to /jokes\n        return createUserSession(user.id, redirectTo);\n      }\n    case \"register\":\n      {\n        const userExists = await db.user.findFirst({\n          where: {\n            username\n          }\n        });\n        if (userExists) {\n          return badRequest({\n            fieldErrors: null,\n            fields,\n            formError: `User with username ${username} already exists`\n          });\n        }\n        // create the user\n        const user = await register({\n          username,\n          password\n        });\n        // create their session and redirect to /jokes\n        if (!user) {\n          return badRequest({\n            fieldErrors: null,\n            fields,\n            formError: \"Something went wrong trying to create a new user.\"\n          });\n        }\n        return createUserSession(user.id, redirectTo);\n      }\n    default:\n      {\n        return badRequest({\n          fieldErrors: null,\n          fields,\n          formError: \"Login type invalid\"\n        });\n      }\n  }\n};\nexport default function Login() {\n  _s();\n  const actionData = useActionData();\n  const [searchParams] = useSearchParams();\n  console.log(searchParams);\n  return <div className=\"container\">\r\n      <div className=\"content\" data-light=\"\">\r\n        <h1>Login</h1>\r\n        <Form method=\"post\">\r\n          <input type=\"hidden\" name=\"redirectTo\" value={searchParams.get(\"redirectTo\") ?? undefined} />\n\n          \r\n          <fieldset>\r\n            <legend className=\"sr-only\">\r\n              Login or Register?\r\n            </legend>\r\n            <label>\r\n              <input type=\"radio\" name=\"loginType\" value=\"login\" defaultChecked={!actionData?.fields?.loginType || actionData?.fields?.loginType === \"login\"} />\n\n              {\" \"}\r\n              Login\r\n            </label>\r\n            <label>\r\n              <input type=\"radio\" name=\"loginType\" value=\"register\" defaultChecked={actionData?.fields?.loginType === \"register\"} />\n\n              {\" \"}\r\n              Register\r\n            </label>\r\n          </fieldset>\r\n          <div>\r\n            <label htmlFor=\"username-input\">Username</label>\r\n            <input type=\"text\" id=\"username-input\" name=\"username\" defaultValue={actionData?.fields?.username} aria-invalid={Boolean(actionData?.fieldErrors?.username)} aria-errormessage={actionData?.fieldErrors?.username ? \"username-error\" : undefined} />\n\n            \r\n            {actionData?.fieldErrors?.username ? <p className=\"form-validation-error\" role=\"alert\" id=\"username-error\">\n              \r\n                {actionData.fieldErrors.username}\r\n              </p> : null}\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"password-input\">Password</label>\r\n            <input id=\"password-input\" name=\"password\" type=\"password\" defaultValue={actionData?.fields?.password} aria-invalid={Boolean(actionData?.fieldErrors?.password)} aria-errormessage={actionData?.fieldErrors?.password ? \"password-error\" : undefined} />\n\n            \r\n            {actionData?.fieldErrors?.password ? <p className=\"form-validation-error\" role=\"alert\" id=\"password-error\">\n              \r\n                {actionData.fieldErrors.password}\r\n              </p> : null}\r\n          </div>\r\n          <div id=\"form-error-message\">\r\n            {actionData?.formError ? <p className=\"form-validation-error\" role=\"alert\">\n              \r\n                {actionData.formError}\r\n              </p> : null}\r\n          </div>\r\n          <button type=\"submit\" className=\"button\">\r\n            Submit\r\n          </button>\r\n        </Form>\r\n      </div>\r\n      <div className=\"links\">\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/jokes\">Jokes</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>;\n}\n_s(Login, \"l8x34vVXs1FlNFLPEnmoic4WVOs=\", false, function () {\n  return [useActionData, useSearchParams];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,gBAAmB;AACnB,qBAA2B;AAC3B,qBAAmD;AAiI3C;AAxJR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,iCAAmC,EAAE;AAAA,EAC9E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAwB;AAC1B;AAQO,IAAM,QAAQ,MAAM,CAAC;AAAA,EAC1B,KAAK;AAAA,EACL,MAAM;AACR,CAAC;AACM,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,GAAG;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,EACX,CAAC;AACH;AA8Ge,SAAR,QAAyB;AAlJhC,cAAAA,KAAA;AAmJE,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,CAAC,YAAY,IAAI,gBAAgB;AACvC,UAAQ,IAAI,YAAY;AACxB,SAAO,mDAAC,SAAI,WAAU,aAClB;AAAA,uDAAC,SAAI,WAAU,WAAU,cAAW,IAClC;AAAA,yDAAC,QAAG,qBAAJ;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,MACT,mDAAC,QAAK,QAAO,QACX;AAAA,2DAAC,WAAM,MAAK,UAAS,MAAK,cAAa,QAAO,kBAAa,IAAI,YAAY,MAA7B,YAAkC,UAAhF;AAAA;AAAA;AAAA;AAAA,eAA2F;AAAA,QAG3F,mDAAC,cACC;AAAA,6DAAC,YAAO,WAAU,WAAU,kCAA5B;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,mDAAC,WACC;AAAA,+DAAC,WAAM,MAAK,SAAQ,MAAK,aAAY,OAAM,SAAQ,gBAAgB,GAAC,8CAAY,WAAZ,mBAAoB,gBAAaA,MAAA,yCAAY,WAAZ,gBAAAA,IAAoB,eAAc,WAAvI;AAAA;AAAA;AAAA;AAAA,mBAAgJ;AAAA,YAE/I;AAAA,YAAI;AAAA,eAHP;AAAA;AAAA;AAAA;AAAA,iBAKA;AAAA,UACA,mDAAC,WACC;AAAA,+DAAC,WAAM,MAAK,SAAQ,MAAK,aAAY,OAAM,YAAW,kBAAgB,8CAAY,WAAZ,mBAAoB,eAAc,cAAxG;AAAA;AAAA;AAAA;AAAA,mBAAoH;AAAA,YAEnH;AAAA,YAAI;AAAA,eAHP;AAAA;AAAA;AAAA;AAAA,iBAKA;AAAA,aAfF;AAAA;AAAA;AAAA;AAAA,eAgBA;AAAA,QACA,mDAAC,SACC;AAAA,6DAAC,WAAM,SAAQ,kBAAiB,wBAAhC;AAAA;AAAA;AAAA;AAAA,iBAAwC;AAAA,UACxC,mDAAC,WAAM,MAAK,QAAO,IAAG,kBAAiB,MAAK,YAAW,eAAc,8CAAY,WAAZ,mBAAoB,UAAU,gBAAc,SAAQ,8CAAY,gBAAZ,mBAAyB,QAAQ,GAAG,uBAAmB,8CAAY,gBAAZ,mBAAyB,YAAW,mBAAmB,UAAvO;AAAA;AAAA;AAAA;AAAA,iBAAkP;AAAA,YAGjP,8CAAY,gBAAZ,mBAAyB,YAAW,mDAAC,OAAE,WAAU,yBAAwB,MAAK,SAAQ,IAAG,kBAErF,qBAAW,YAAY,YAFS;AAAA;AAAA;AAAA;AAAA,iBAGnC,IAAO;AAAA,aARX;AAAA;AAAA;AAAA;AAAA,eASA;AAAA,QACA,mDAAC,SACC;AAAA,6DAAC,WAAM,SAAQ,kBAAiB,wBAAhC;AAAA;AAAA;AAAA;AAAA,iBAAwC;AAAA,UACxC,mDAAC,WAAM,IAAG,kBAAiB,MAAK,YAAW,MAAK,YAAW,eAAc,8CAAY,WAAZ,mBAAoB,UAAU,gBAAc,SAAQ,8CAAY,gBAAZ,mBAAyB,QAAQ,GAAG,uBAAmB,8CAAY,gBAAZ,mBAAyB,YAAW,mBAAmB,UAA3O;AAAA;AAAA;AAAA;AAAA,iBAAsP;AAAA,YAGrP,8CAAY,gBAAZ,mBAAyB,YAAW,mDAAC,OAAE,WAAU,yBAAwB,MAAK,SAAQ,IAAG,kBAErF,qBAAW,YAAY,YAFS;AAAA;AAAA;AAAA;AAAA,iBAGnC,IAAO;AAAA,aARX;AAAA;AAAA;AAAA;AAAA,eASA;AAAA,QACA,mDAAC,SAAI,IAAG,sBACL,oDAAY,aAAY,mDAAC,OAAE,WAAU,yBAAwB,MAAK,SAE9D,qBAAW,aAFS;AAAA;AAAA;AAAA;AAAA,eAGvB,IAAO,QAJX;AAAA;AAAA;AAAA;AAAA,eAKA;AAAA,QACA,mDAAC,YAAO,MAAK,UAAS,WAAU,UAAS,sBAAzC;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAjDF;AAAA;AAAA;AAAA;AAAA,aAkDA;AAAA,SApDF;AAAA;AAAA;AAAA;AAAA,WAqDA;AAAA,IACA,mDAAC,SAAI,WAAU,SACb,6DAAC,QACC;AAAA,yDAAC,QACC,6DAAC,QAAK,IAAG,KAAI,oBAAb;AAAA;AAAA;AAAA;AAAA,aAAiB,KADnB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,QACC,6DAAC,QAAK,IAAG,UAAS,qBAAlB;AAAA;AAAA;AAAA;AAAA,aAAuB,KADzB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SANF;AAAA;AAAA;AAAA;AAAA,WAOA,KARF;AAAA;AAAA;AAAA;AAAA,WASA;AAAA,OAhEG;AAAA;AAAA;AAAA;AAAA,SAiEL;AACJ;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,eAAe,eAAe;AACxC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["_c"]
}
