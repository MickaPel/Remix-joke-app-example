{
  "version": 3,
  "sources": ["../../../app/routes/jokes.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\jokes.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\jokes.tsx\");\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, Outlet, useLoaderData } from \"@remix-run/react\";\nimport { db } from \"~/utils/db.server\";\nimport stylesUrl from \"~/styles/jokes.css\";\nimport { getUser } from \"~/utils/session.server\";\nexport const links = () => [{\n  rel: \"stylesheet\",\n  href: stylesUrl\n}];\nexport const loader = async ({\n  request\n}) => {\n  return json({\n    jokes: await db.joke.findMany({\n      orderBy: {\n        createdAt: \"desc\"\n      },\n      select: {\n        id: true,\n        name: true\n      },\n      take: 5\n    }),\n    user: await getUser(request)\n  });\n};\nexport default function JokesRoute() {\n  _s();\n  const data = useLoaderData();\n  return <div className=\"jokes-layout\">\r\n            <header className=\"jokes-header\">\r\n            <div className=\"container\">\r\n                <h1 className=\"home-link\">\r\n                <Link to=\"/\" title=\"Remix Jokes\" aria-label=\"Remix Jokes\">\n              \r\n                    <span className=\"logo\">\uD83E\uDD2A</span>\r\n                    <span className=\"logo-medium\">J\uD83E\uDD2AKES</span>\r\n                </Link>\r\n                </h1>\r\n                {data.user ? <div className=\"user-info\">\r\n                        <span>{`Hi ${data.user.username}`}</span>\r\n                        <Form action=\"/logout\" method=\"post\">\r\n                            <button type=\"submit\" className=\"button\">\r\n                                Logout\r\n                            </button>\r\n                        </Form>\r\n                    </div> : <Link to=\"/login\">Login</Link>}\n          \r\n            </div>\r\n            </header>\r\n            <main className=\"jokes-main\">\r\n            <div className=\"container\">\r\n                <div className=\"jokes-list\">\r\n                    {/* to=\".\" This link will effectively tell Remix to reload the data for the current route */}\r\n                    <Link to=\".\">Get a random joke</Link>\r\n                    <p>Here are a few more jokes to check out:</p>\r\n                    <ul>\r\n                        {data.jokes.map(({\n              id,\n              name\n            }) => <li key={id}>\r\n                                <Link prefetch=\"intent\" to={id}>{name}</Link>\r\n                            </li>)}\r\n                    </ul>\r\n                    <Link to=\"new\" className=\"button\">Add your own</Link>\r\n                </div>\r\n                <div className=\"jokes-outlet\">\r\n                    <Outlet />\r\n                </div>\r\n            </div>\r\n            </main>\r\n        </div>;\n}\n_s(JokesRoute, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = JokesRoute;\nvar _c;\n$RefreshReg$(_c, \"JokesRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
