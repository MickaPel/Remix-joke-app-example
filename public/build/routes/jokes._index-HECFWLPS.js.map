{
  "version": 3,
  "sources": ["../../../app/routes/jokes._index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\jokes._index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\jokes._index.tsx\");\n  import.meta.hot.lastModified = \"1694683367319.3843\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { Link, isRouteErrorResponse, useLoaderData, useRouteError } from \"@remix-run/react\";\nimport { db } from \"~/utils/db.server\";\nexport const loader = async () => {\n  const count = await db.joke.count();\n  const randomRowNumber = Math.floor(Math.random() * count);\n  const [randomJoke] = await db.joke.findMany({\n    skip: randomRowNumber,\n    take: 1\n  });\n  if (!randomJoke) {\n    throw new Response(\"No random joke found\", {\n      status: 404\n    });\n  }\n  return json({\n    randomJoke\n  });\n};\nexport default function JokesIndex() {\n  _s();\n  const data = useLoaderData();\n  return <div>\r\n            <p>Here's a random joke:</p>\r\n            <p>{data.randomJoke.content}</p>\r\n            <Link to={data.randomJoke.id}>\r\n                \"{data.randomJoke.name}\" Permalink\r\n            </Link>\r\n        </div>;\n}\n_s(JokesIndex, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = JokesIndex;\nexport function ErrorBoundary() {\n  _s2();\n  const error = useRouteError();\n  if (isRouteErrorResponse(error) && error.status === 404) {\n    return <div className=\"error-container\">\r\n            <p>There are no jokes to display.</p>\r\n            <Link to=\"new\">Add your own</Link>\r\n          </div>;\n  }\n  return <div className=\"error-container\">\r\n        I did a whoopsies.\r\n      </div>;\n}\n_s2(ErrorBoundary, \"oAgjgbJzsRXlB89+MoVumxMQqKM=\", false, function () {\n  return [useRouteError];\n});\n_c2 = ErrorBoundary;\nvar _c, _c2;\n$RefreshReg$(_c, \"JokesIndex\");\n$RefreshReg$(_c2, \"ErrorBoundary\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,kBAAqB;AAErB,gBAAmB;AAqBP;AA5CZ,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,wCAA0C,EAAE;AAAA,EACrF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAAtB,IACE,MAAM,aAAa;AAErB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA+B;AAC/B,cAAY,IAAI,eAAe;AACjC;AAsBe,SAAR,aAA8B;AACnC,KAAG;AACH,QAAM,OAAO,cAAc;AAC3B,SAAO,mDAAC,SACE;AAAA,uDAAC,OAAE,qCAAH;AAAA;AAAA;AAAA;AAAA,WAAwB;AAAA,IACxB,mDAAC,OAAG,eAAK,WAAW,WAApB;AAAA;AAAA;AAAA;AAAA,WAA4B;AAAA,IAC5B,mDAAC,QAAK,IAAI,KAAK,WAAW,IAAI;AAAA;AAAA,MACxB,KAAK,WAAW;AAAA,MAAK;AAAA,SAD3B;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OALH;AAAA;AAAA;AAAA;AAAA,SAMD;AACR;AACA,GAAG,YAAY,gCAAgC,OAAO,WAAY;AAChE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACE,SAAS,gBAAgB;AAC9B,MAAI;AACJ,QAAM,QAAQ,cAAc;AAC5B,MAAI,qBAAqB,KAAK,KAAK,MAAM,WAAW,KAAK;AACvD,WAAO,mDAAC,SAAI,WAAU,mBACd;AAAA,yDAAC,OAAE,8CAAH;AAAA;AAAA;AAAA;AAAA,aAAiC;AAAA,MACjC,mDAAC,QAAK,IAAG,OAAM,4BAAf;AAAA;AAAA;AAAA;AAAA,aAA2B;AAAA,SAF5B;AAAA;AAAA;AAAA;AAAA,WAGD;AAAA,EACR;AACA,SAAO,mDAAC,SAAI,WAAU,mBAAkB,kCAAjC;AAAA;AAAA;AAAA;AAAA,SAEH;AACN;AACA,IAAI,eAAe,gCAAgC,OAAO,WAAY;AACpE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,MAAM;AACN,IAAI;AAAJ,IAAQ;AACR,aAAa,IAAI,YAAY;AAC7B,aAAa,KAAK,eAAe;AAEjC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
